{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nexport default {\n  name: 'SearchBarComponent',\n  data() {\n    return {\n      inputText: '' // 검색어를 저장할 변수\n    };\n  },\n  // 부모 --> 자식 data 전달\n  props: {\n    data: Array // 부모 컴포넌트에서 전달받는 영화 데이터\n  },\n  watch: {\n    inputText(name) {\n      // 입력한 영화 제목이 데이터에 있는지 확인하는 역할\n      // 현재 data는 props를 통해 가져온 것이고 별도로 선언한 것이 아니기 때문에 객체 안의 data라 판단하여 this를 써주어야함\n      const findName = this.data.filter(movie => {\n        return movie.title.includes(name);\n      });\n      console.log(findName);\n      // findName은 검색어가 포함된 영화 제목을 가진 배열이 됨\n      if (findName.length == 0) {\n        alert(\"해당 자료가 없습니다.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","inputText","props","Array","watch","findName","filter","movie","title","includes","console","log","length","alert"],"sources":["C:\\Users\\KBDS\\Desktop\\vue3.0\\vue_study\\vue_project_1\\src\\components\\SearchBar.vue"],"sourcesContent":["<template>\r\n    <div class=\"search-box\">\r\n        <!-- @input으로 들어갈 값은 $event.target.value로 받습니다. (입력된 값으로 바로 넘기는것) \r\n        v-model로 사용가능함 \r\n        @input=\"inputText = $event.target.value\" == v-model=\"inputText\"\r\n        -->\r\n        <input type=\"search\" \r\n        @change=\"$emit('searchMovie', { movieName: $event.target.value })\r\n        inputText = $event.target.value; \r\n        $event.target.value = ''\" \r\n        placeholder=\"검색어를 입력하세요\" />\r\n        <button>검색</button>\r\n    </div>\r\n    <p>{{ inputText }}</p>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: 'SearchBarComponent',\r\n    data() {\r\n        return {\r\n            inputText: '', // 검색어를 저장할 변수\r\n        }\r\n    },\r\n    // 부모 --> 자식 data 전달\r\n    props: {\r\n        data: Array, // 부모 컴포넌트에서 전달받는 영화 데이터\r\n    },\r\n    watch: {\r\n        inputText(name) {\r\n            // 입력한 영화 제목이 데이터에 있는지 확인하는 역할\r\n            // 현재 data는 props를 통해 가져온 것이고 별도로 선언한 것이 아니기 때문에 객체 안의 data라 판단하여 this를 써주어야함\r\n            const findName = this.data.filter(movie => {\r\n                return movie.title.includes(name);\r\n            })\r\n            console.log(findName);\r\n            // findName은 검색어가 포함된 영화 제목을 가진 배열이 됨\r\n            if(findName.length == 0){\r\n                alert(\"해당 자료가 없습니다.\")\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.search-box {\r\n    padding: 10px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.search-box input {\r\n    padding: 5px 10px;\r\n}\r\n\r\n.search-box button {\r\n    margin: 0;\r\n}\r\n</style>"],"mappings":";;AAgBA,eAAe;EACXA,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE,EAAE,CAAE;IACnB;EACJ,CAAC;EACD;EACAC,KAAK,EAAE;IACHF,IAAI,EAAEG,KAAK,CAAE;EACjB,CAAC;EACDC,KAAK,EAAE;IACHH,SAASA,CAACF,IAAI,EAAE;MACZ;MACA;MACA,MAAMM,QAAO,GAAI,IAAI,CAACL,IAAI,CAACM,MAAM,CAACC,KAAI,IAAK;QACvC,OAAOA,KAAK,CAACC,KAAK,CAACC,QAAQ,CAACV,IAAI,CAAC;MACrC,CAAC;MACDW,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;MACrB;MACA,IAAGA,QAAQ,CAACO,MAAK,IAAK,CAAC,EAAC;QACpBC,KAAK,CAAC,cAAc;MACxB;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}